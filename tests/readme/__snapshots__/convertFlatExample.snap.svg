<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="P1
red
N1" data-x="1" data-y="0" cx="277.5757575757576" cy="320" r="3" fill="red" /><text x="282.5757575757576" y="315" font-family="sans-serif" font-size="12">P1
      red
      N1</text>
  </g>
  <g>
    <circle data-type="point" data-label="P2
blue
N1" data-x="0" data-y="0" cx="51.313131313131294" cy="320" r="3" fill="blue" /><text x="56.313131313131294" y="315" font-family="sans-serif" font-size="12">P2
      blue
      N1</text>
  </g>
  <g>
    <circle data-type="point" data-label="P1
red
net0" data-x="2.375" data-y="0" cx="588.6868686868687" cy="320" r="3" fill="red" /><text x="593.6868686868687" y="315" font-family="sans-serif" font-size="12">P1
      red
      net0</text>
  </g>
  <g>
    <circle data-type="point" data-label="P2
blue
net0" data-x="1.3750000000000002" data-y="0" cx="362.4242424242425" cy="320" r="3" fill="blue" /><text x="367.4242424242425" y="315" font-family="sans-serif" font-size="12">P2
      blue
      net0</text>
  </g>
  <g>
    <polyline data-points="1,0 0,0" data-type="line" data-label="" points="277.5757575757576,320 51.313131313131294,320" fill="none" stroke="hsl(0, 100%, 50%, 0.2)" stroke-width="1" />
  </g>
  <g>
    <polyline data-points="2.375,0 1.3750000000000002,0" data-type="line" data-label="" points="588.6868686868687,320 362.4242424242425,320" fill="none" stroke="hsl(0, 100%, 50%, 0.2)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="B1" data-x="1" data-y="0" x="266.26262626262627" y="308.6868686868687" width="22.626262626262644" height="22.626262626262587" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.004419642857142856" /><text x="271.26262626262627" y="308.6868686868687" font-family="sans-serif" dominant-baseline="text-before-edge" font-size="1.357575757575757" fill="black">B1</text>
  </g>
  <g>
    <rect data-type="rect" data-label="B2" data-x="0" data-y="0" x="39.99999999999998" y="308.6868686868687" width="22.62626262626263" height="22.626262626262587" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.004419642857142856" /><text x="44.99999999999998" y="308.6868686868687" font-family="sans-serif" dominant-baseline="text-before-edge" font-size="1.3575757575757565" fill="black">B2</text>
  </g>
  <g>
    <rect data-type="rect" data-label="B1" data-x="2.375" data-y="0" x="577.3737373737375" y="308.6868686868687" width="22.626262626262474" height="22.626262626262587" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.004419642857142856" /><text x="582.3737373737375" y="308.6868686868687" font-family="sans-serif" dominant-baseline="text-before-edge" font-size="1.3575757575757517" fill="black">B1</text>
  </g>
  <g>
    <rect data-type="rect" data-label="B2" data-x="1.3750000000000002" data-y="0" x="351.1111111111112" y="308.6868686868687" width="22.626262626262644" height="22.626262626262587" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.004419642857142856" /><text x="356.1111111111112" y="308.6868686868687" font-family="sans-serif" dominant-baseline="text-before-edge" font-size="1.357575757575757" fill="black">B2</text>
  </g><text data-type="text" data-label="Original" data-x="-0.05" data-y="0.05" x="39.99999999999998" y="308.6868686868687" fill="black" font-size="1.1313131313131317" font-family="sans-serif" text-anchor="start" dominant-baseline="text-after-edge">Original</text><text data-type="text" data-label="Round Trip" data-x="1.3250000000000002" data-y="0.05" x="351.1111111111112" y="308.6868686868687" fill="black" font-size="1.1313131313131317" font-family="sans-serif" text-anchor="start" dominant-baseline="text-after-edge">Round Trip</text>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 226.2626262626263,
        "c": 0,
        "e": 51.313131313131294,
        "b": 0,
        "d": -226.2626262626263,
        "f": 320
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>
